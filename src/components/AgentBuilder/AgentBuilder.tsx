import React, { useState, useCallback, useRef, useEffect } from 'react';
import { 
  Plus, 
  Save, 
  Play, 
  Settings, 
  ArrowLeft,
  Zap,
  Eye,
  RotateCcw,
  Undo,
  Redo,
  Upload
} from 'lucide-react';
import { useAuth } from '../../hooks/useAuth';
import { supabase } from '../../lib/supabase';
import { activepiecesClient } from '../../services/activepieces';
import { WorkflowNode, WorkflowEdge } from '../../types/workflow';
import WorkflowCanvas from '../WorkflowBuilder/WorkflowCanvas';
import BlockPalette from '../WorkflowBuilder/BlockPalette';
import PropertiesPanel from '../WorkflowBuilder/PropertiesPanel';
import WorkflowToolbar from '../WorkflowBuilder/WorkflowToolbar';
import TestRunner from '../WorkflowBuilder/TestRunner';
import WorkflowPreview from '../WorkflowBuilder/WorkflowPreview';
import ActivepiecesDeployment from '../WorkflowBuilder/ActivepiecesDeployment';
import AddNodeModal from '../WorkflowBuilder/AddNodeModal';

interface AgentBuilderProps {
  agentId?: string | null;
  generatedAgent?: any;
  onSave: (workflow: any) => void;
  onTest: () => void;
}

const AgentBuilder: React.FC<AgentBuilderProps> = ({ agentId, generatedAgent, onSave, onTest }) => {
  const [agentName, setAgentName] = useState('Untitled Agent');
  const [agentDescription, setAgentDescription] = useState('');
  const [showPalette, setShowPalette] = useState(false);
  const [isTestMode, setIsTestMode] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [showTestRunner, setShowTestRunner] = useState(false);
  const [showPreview, setShowPreview] = useState(false);
  const [showActivepiecesDeploy, setShowActivepiecesDeploy] = useState(false);
  const [showAddModal, setShowAddModal] = useState(false);
  const [isDeploying, setIsDeploying] = useState(false);

  // Simple state management for nodes and edges (no complex store)
  const [nodes, setNodes] = useState<WorkflowNode[]>([]);
  const [edges, setEdges] = useState<WorkflowEdge[]>([]);
  const [selectedNodeId, setSelectedNodeId] = useState<string | null>(null);

  const { user, workspace } = useAuth();

  // Load existing agent if editing, or load generated agent data
  useEffect(() => {
    if (agentId) {
      loadAgent();
    } else if (generatedAgent) {
      loadGeneratedAgent();
    } else {
      // Clear the workflow for new agent
      setNodes([]);
      setEdges([]);
      setAgentName('Untitled Agent');
      setAgentDescription('');
    }
  }, [agentId, generatedAgent]);

  const loadAgent = async () => {
    if (!agentId) return;

    try {
      setIsLoading(true);
      
      const { data: agent, error } = await supabase
        .from('agents')
        .select('*')
        .eq('id', agentId)
        .single();

      if (error) {
        console.error('Failed to load agent:', error);
        return;
      }

      if (agent) {
        setAgentName(agent.name);
        setAgentDescription(agent.description || '');
        
        // Load the workflow blocks
        if (agent.blocks && agent.blocks.nodes) {
          setNodes(agent.blocks.nodes);
          setEdges(agent.blocks.edges || []);
        }
      }
    } catch (error) {
      console.error('Error loading agent:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const loadGeneratedAgent = () => {
    try {
      console.log('Loading generated agent data:', generatedAgent);
      
      setAgentName(generatedAgent.name || 'AI Generated Agent');
      setAgentDescription(generatedAgent.description || 'Generated by AI');
      
      // Transform AI-generated nodes to match WorkflowNode interface
      if (generatedAgent.nodes && Array.isArray(generatedAgent.nodes)) {
        const transformedNodes = generatedAgent.nodes.map((node: any) => ({
          id: node.id || `node-${Date.now()}-${Math.random()}`,
          type: node.type || 'prompt',
          position: node.position || { x: 100, y: 100 },
          data: {
            label: node.data?.label || node.label || `${node.type} Block`,
            description: node.data?.description || node.description || '',
            config: node.data?.config || {},
            inputs: node.data?.inputs || [],
            outputs: node.data?.outputs || [],
            integrationId: node.data?.integrationId,
            isValid: true,
            errors: []
          }
        }));

        // Transform AI-generated edges to match WorkflowEdge interface
        const transformedEdges = (generatedAgent.edges || []).map((edge: any) => ({
          id: edge.id || `edge-${Date.now()}-${Math.random()}`,
          source: edge.source,
          target: edge.target,
          sourceHandle: edge.sourceHandle,
          targetHandle: edge.targetHandle,
          type: edge.type || 'default'
        }));

        console.log('Transformed nodes:', transformedNodes);
        console.log('Transformed edges:', transformedEdges);

        setNodes(transformedNodes);
        setEdges(transformedEdges);
      } else {
        console.warn('No valid nodes found in generated agent');
        setNodes([]);
        setEdges([]);
      }
    } catch (error) {
      console.error('Error loading generated agent:', error);
      // Fallback to empty workflow
      setNodes([]);
      setEdges([]);
    }
  };

  const handleSave = useCallback(async () => {
    if (!workspace?.id || !user?.id) return;

    setIsSaving(true);
    try {
      const workflow = {
        name: agentName,
        description: agentDescription,
        nodes,
        edges,
        version: '1.0',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      const agentData = {
        name: agentName,
        description: agentDescription,
        workspace_id: workspace.id,
        created_by: user.id,
        blocks: { nodes, edges },
        status: 'draft',
        updated_at: new Date().toISOString()
      };

      if (agentId) {
        // Update existing agent
        const { error } = await supabase
          .from('agents')
          .update(agentData)
          .eq('id', agentId);

        if (error) {
          throw error;
        }
      } else {
        // Create new agent
        const { data, error } = await supabase
          .from('agents')
          .insert(agentData)
          .select()
          .single();

        if (error) {
          throw error;
        }

        // Update the workflow reference
        console.log('Agent saved with ID:', data.id);
      }

      onSave(workflow);
    } catch (error) {
      console.error('Failed to save agent:', error);
      alert('Failed to save agent. Please try again.');
    } finally {
      setIsSaving(false);
    }
  }, [agentId, agentName, agentDescription, nodes, edges, workspace, user, onSave]);

  // Simple validation function (fixed for actual workflow node types)
  const validateWorkflow = (): { isValid: boolean; errors: string[] } => {
    const errors: string[] = [];
    
    if (nodes.length === 0) {
      errors.push('Workflow must have at least one node');
    }
    
    // Check for at least one node (since all can be input/output via handles)
    nodes.forEach(node => {
      if (!node.data?.label || node.data.label.trim() === '') {
        errors.push(`Node "${node.id}" must have a label`);
      }
      
      // Validate node-specific configurations
      if (node.type === 'prompt' && !node.data.config?.instruction) {
        errors.push(`Prompt node "${node.data.label}" must have instructions`);
      }
      
      if (node.type === 'tool' && !node.data.config?.service) {
        errors.push(`Tool node "${node.data.label}" must have a service configured`);
      }
      
      if (node.type === 'integration' && !node.data.config?.integrationId) {
        errors.push(`Integration node "${node.data.label}" must have an integration selected`);
      }
    });
    
    return {
      isValid: errors.length === 0,
      errors
    };
  };

  // Add node function
  const addNode = useCallback((type: WorkflowNode['type'], position: { x: number; y: number }) => {
    const newNode: WorkflowNode = {
      id: `${type}_${Date.now()}`,
      type,
      position,
      data: {
        label: `${type.charAt(0).toUpperCase() + type.slice(1)} Node`,
        config: {},
        inputs: [{ id: 'input', type: 'target', position: 'left' }],
        outputs: [{ id: 'output', type: 'source', position: 'right' }],
      },
    };

    setNodes(prev => [...prev, newNode]);
    setSelectedNodeId(newNode.id);
  }, []);

  // Connection handler
  const onConnect = useCallback((params: any) => {
    const newEdge: WorkflowEdge = {
      id: `${params.source}-${params.target}`,
      source: params.source,
      target: params.target,
      sourceHandle: params.sourceHandle,
      targetHandle: params.targetHandle,
    };

    setEdges(prev => [...prev, newEdge]);
  }, []);

  const handleTest = useCallback(async () => {
    const validation = validateWorkflow();
    if (!validation.isValid) {
      alert(`Please fix validation errors:\n${validation.errors.join('\n')}`);
      return;
    }

    setShowTestRunner(true);
  }, [nodes]);

  const handlePreview = useCallback(() => {
    setShowPreview(true);
  }, []);

  const handleActivepiecesDeploy = useCallback(async () => {
    const validation = validateWorkflow();
    if (!validation.isValid) {
      alert(`Please fix validation errors:\n${validation.errors.join('\n')}`);
      return;
    }

    if (!agentId) {
      alert('Please save the agent before deploying');
      return;
    }

    try {
      setIsDeploying(true);
      
      // Transform workflow to Activepieces format
      const flowData = activepiecesClient.transformToActivepiecesFlow({
        name: agentName,
        description: agentDescription,
        nodes,
        edges
      });

      console.log('Deploying to Activepieces:', flowData);
      
      // Create flow in Activepieces
      const flow = await activepiecesClient.createFlow(flowData);
      
      // Update agent with Activepieces flow ID
      const { error } = await supabase
        .from('agents')
        .update({ 
          activepieces_flow_id: flow.id,
          status: 'active'
        })
        .eq('id', agentId);

      if (error) {
        throw error;
      }

      alert(`Successfully deployed to Activepieces! Flow ID: ${flow.id}`);
      
    } catch (error) {
      console.error('Deployment failed:', error);
      alert(`Deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsDeploying(false);
    }
  }, [validateWorkflow, agentId, agentName, agentDescription, nodes, edges]);

  const handleNodeSelect = useCallback((nodeId: string | null) => {
    setSelectedNodeId(nodeId);
  }, []);

  const handleCanvasClick = useCallback(() => {
    setSelectedNodeId(null);
  }, []);

  const handleAddNode = useCallback(() => {
    setShowAddModal(true);
  }, []);

  if (isLoading) {
    return (
      <div className="h-screen flex items-center justify-center bg-gray-50">
        <div className="w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full animate-spin" />
      </div>
    );
  }

  return (
    <div className="h-screen flex flex-col bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-4 flex-shrink-0">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <button 
              onClick={() => window.history.back()}
              className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors duration-200"
            >
              <ArrowLeft className="w-5 h-5" />
            </button>
            <div className="flex items-center space-x-3">
              <input
                type="text"
                value={agentName}
                onChange={(e) => setAgentName(e.target.value)}
                className="text-xl font-bold text-gray-900 bg-transparent border-none outline-none focus:bg-gray-50 rounded px-2 py-1"
                placeholder="Enter agent name..."
              />
              <span className="text-gray-300">|</span>
              <input
                type="text"
                value={agentDescription}
                onChange={(e) => setAgentDescription(e.target.value)}
                className="text-gray-600 bg-transparent border-none outline-none focus:bg-gray-50 rounded px-2 py-1"
                placeholder="Add description..."
              />
            </div>
          </div>
          
          {/* Deploy to Activepieces Button (only show for saved agents) */}
          {agentId && (
            <button
              onClick={handleActivepiecesDeploy}
              className="px-4 py-2 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-lg hover:from-green-700 hover:to-green-800 transition-all duration-200 flex items-center space-x-2"
            >
              <Upload className="w-4 h-4" />
              <span>Deploy to Activepieces</span>
            </button>
          )}
        </div>
      </div>

      {/* Toolbar */}
      <WorkflowToolbar
        onSave={handleSave}
        onTest={handleTest}
        onPreview={handlePreview}
        onAddNode={handleAddNode}
        isTestMode={isTestMode}
        isSaving={isSaving}
      />

      <div className="flex-1 flex relative">
        {/* Block Palette */}
        <BlockPalette 
          isOpen={showPalette}
          onClose={() => setShowPalette(false)}
        />

        {/* Main Canvas */}
        <div className="flex-1 relative">
          <WorkflowCanvas />
        </div>

        {/* Properties Panel */}
        {selectedNodeId && (
          <PropertiesPanel
            nodeId={selectedNodeId}
            onClose={() => setSelectedNodeId(null)}
          />
        )}
      </div>

      {/* Modals */}
      <TestRunner
        isOpen={showTestRunner}
        onClose={() => setShowTestRunner(false)}
      />

      <WorkflowPreview
        isOpen={showPreview}
        onClose={() => setShowPreview(false)}
      />

      <ActivepiecesDeployment
        isOpen={showActivepiecesDeploy}
        onClose={() => setShowActivepiecesDeploy(false)}
        agentId={agentId || 'new'}
        agentName={agentName}
      />

      <AddNodeModal
        isOpen={showAddModal}
        onClose={() => setShowAddModal(false)}
        onAddNode={(template) => {
          const nodeId = `${template.type}-${Date.now()}`;
          const newNode = {
            id: nodeId,
            type: template.type,
            position: { x: 400, y: nodes.length * 200 + 100 },
            data: {
              label: template.label,
              description: template.description,
              config: template.defaultConfig,
              inputs: template.defaultHandles?.inputs || [],
              outputs: template.defaultHandles?.outputs || [],
              integrationId: template.integrationId,
              isValid: true,
              errors: []
            }
          };
          
          addNode(newNode.type, newNode.position);
          
          // If there are existing nodes, connect to the last one
          if (nodes.length > 0) {
            const lastNode = nodes[nodes.length - 1];
            const newEdge = {
              id: `edge-${lastNode.id}-${nodeId}-${Date.now()}`,
              source: lastNode.id,
              target: nodeId,
              sourceHandle: undefined,
              targetHandle: undefined,
              type: 'default' as const
            };
            
            // Add edge manually to the edges array
            setEdges([...edges, newEdge]);
          }
          
          setShowAddModal(false);
        }}
        position={null}
      />
    </div>
  );
};

export default AgentBuilder;